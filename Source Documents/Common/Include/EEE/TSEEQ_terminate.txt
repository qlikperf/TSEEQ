sub StoreQVD
	Trace 'Entering subroutine StoreQVD in $(vCommonScriptPath)\EEE\TSEEQ_terminate.txt';
/**********************************************************************************************************************************************************
	File:			SEEQ_terminate.txt
	Purpose:		Extract, Transform and Load tables as specified in the table specified by the variable vRulesSourceFile.
						Subroutines in this file are called from SEEQ_include.txt
	
	Author:		Jeff R. Robbins
	Email:		jrs@qlik.com; jr@QlikPerf.com
	
	Version:	6.0.1
	Date:		2022-07-07

	This program is provided in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
**********************************************************************************************************************************************************/
	LET vSEEQ_NoOfRowsInTarget=NoOfRows('$(vSEEQ_TargetWithoutBrackets)') ;
	LET vSEEQ_TimeQVDStore = num(now(1));		// performance profiling  
		IF upper(vTSEEQ_Mode) = 'GENERATE AND EXECUTE' AND vSEEQ_ThisIsMappingTable <> 1 AND vSEEQ_NoOfRowsInTarget > 0  THEN		// vTSEEQ_Mode is not GENERATE ONLY and this is not a mapping table.
			IF 	vSEEQ_ErrorDetected <> 1 AND upper(vPurpose) <> 'LOAD' THEN
				STORE $(vSEEQ_Target) INTO [$(vSEEQ_TargetFolder)$(vSEEQ_TargetWithoutBrackets).qvd] (qvd);	
			ENDIF
			LET vSEEQ_NumRecordsStored = vSEEQ_NoOfRowsInTarget;
			LET vSEEQ_NumFieldsStored = NoOfFields('$(vSEEQ_TargetWithoutBrackets)');
		ELSE 
			SET vSEEQ_NumRecordsStored = 0;
			SET vSEEQ_NumFieldsStored = 0;
			IF upper(vTSEEQ_Mode) = 'GENERATE ONLY'	THEN
				CALL SEEQ_WriteMessage('vTSEEQ_Mode = GENERATE ONLY.  ETL code generated but not executed.');			
			ENDIF
			IF vSEEQ_NoOfRowsInTarget AND upper(vTSEEQ_Mode) = 'GENERATE AND EXECUTE' THEN 
//			IF vSEEQ_NoOfRowsInTarget AND upper(vTSEEQ_Mode) = 'GENERATE AND EXECUTE' = 0 THEN 
				CALL SEEQ_WriteMessage('No records exist in $(vSEEQ_TargetWithoutBrackets). Skipping STORE of QVD.');
			ENDIF
			IF vSEEQ_ThisIsMappingTable = 1 AND upper(vTSEEQ_Mode) = 'GENERATE AND EXECUTE' THEN 
//			IF vSEEQ_ThisIsMappingTable = 1  THEN 
				CALL SEEQ_WriteMessage('This is a mapping table - skipping STORE of QVD.');
			ENDIF
	ENDIF
	
	LET vSEEQ_TimeQVDStore = num(now(1)) - vSEEQ_TimeQVDStore;	// performance profiling	
		IF vSEEQ_KeepOrDrop <> 'KEEP' THEN	// default behavior is to drop the table after storing the QVD.
			IF upper(vTSEEQ_Mode) = 'GENERATE AND EXECUTE' AND vSEEQ_ThisIsMappingTable <> 1 AND upper(vPurpose) <> 'LOAD'  THEN		// vTSEEQ_Mode is not GENERATE ONLY
				DROP Table $(vSEEQ_Target);	
		ENDIF
	ENDIF	
	LET vSEEQ_IterationStartTime = timestamp(num(vSEEQ_TimeIteration));
    LET vSEEQ_TimeIteration = num(now(1)) - vSEEQ_TimeIteration;		// performance profiling
//	IF  vSEEQ_NoOfRowsInTarget > 0 OR upper(vTSEEQ_Mode) = 'GENERATE ONLY' OR vSEEQ_ThisIsMappingTable THEN 	
		[Execution Stats]:
		LOAD 
			 if ( len(trim(DocumentTitle() ) ) > 0, DocumentTitle(), subfield(DocumentName(), '.', 1) ) AS [QVW], // 2017-04-19 JRR added this line.
			'$(vSEEQ_DB_Connection)' AS Connection,								// 2020-09-02 JRR added
			PurgeChar('$(vConnectionNamePostfix)', '()') as [Executing User],	// 2020-08-29 JRR added
			'$(vSEEQ_ComputerName)' AS Node,			// 2020-08-29 JRR added
			'$(vSEEQ_Messages)' AS [TSEEQ Execution Messages],
			$(vSEEQ_BatchStartTime) 	AS [Batch Start Time],
			'$(vSEEQ_IterationStartTime)' AS [EEE Start Time],			
			'$(vSEEQ_Constraints)'		 AS [Query Constaint],
			$(vSEEQ_TargetKey) AS SEEQ_TargetKey,
			'$(vPurpose)' AS [ETL Operation],
			$(vSEEQ_NumFields$(vPurposeED)) AS [# Fields], 
			$(vSEEQ_NumRecords$(vPurposeED)) AS [# Rows], 
			$(vSEEQ_NumFieldsStored) AS [# Fields Stored], 
			$(vSEEQ_NumRecordsStored) AS [# Rows Stored], 
			if ('$(vPurpose)'='LOAD', 'N/A', '$(vSEEQ_TargetFolder)$(vSEEQ_TargetWithoutBrackets).qvd' )  AS [QVD With Path],
			'$(vSEEQ_TargetWithoutBrackets).qvd' AS [QVD],
			'$(vSEEQ_IncrementalLoadType)' AS [Load Type],
			if (
				upper('$(vPurpose)') = 'LOAD', 
				'N/A', 
				$(vSEEQ_TimeQVDStore) 
			) 			AS [Time for QVD Store ],
			$(vSEEQ_TimeIncrementalPostProccessing) AS [Time for Incremental Post-Proc],
			$(vSEEQ_TimeIncrementalPreProccessing) AS [Time for Incremental Pre-Proc],				
			$(vSEEQ_TimeLoad) AS [Time for ETL Operation],				
			$(vSEEQ_TimeIteration)			 AS [Time Total for Table]		
			AutoGenerate 1;
//	ENDIF
	IF upper(vSEEQ_Fields) = 'EXCLUDE_SUBSET' THEN 
		drop table ExcludeFields, 	ExcludeFieldsConcat;
	ENDIF
	SET vSEEQ_NoOfRowsInTarget=;

	Trace 'Exiting subroutine StoreQVD in $(vCommonScriptPath)\EEE\TSEEQ_terminate.txt';

End Sub
/******************************************************************************************************************************************/
sub SEEQ_Terminate

	Trace 'Entering subroutine SEEQ_Terminate in $(vCommonScriptPath)\EEE\TSEEQ_terminate.txt';

	SEEQ_var_list_destroy_tmp:		// list of variables to set to null upon the end of engine execution, in the procedure SEEQ_Terminate.
	LOAD Variable as [Variable Name]
	FROM
	[$(vCommonScriptPath)EEE/SEEQ_VariableList.txt]		// 2022-07-07 JRR removed extraneous '\' in front of 'EEE' and replaced remaining '\' with '/'
	(txt, codepage is 1252, embedded labels, delimiter is ' ', msq);

	IF NoOfRows('Execution Stats') > 0 THEN 
    	JOIN ([Execution Stats]) LOAD * Resident SEEQ_ExecutionTrace WHERE upper([EEE Executed Script]) <> 'INIT';
    	DROP Table SEEQ_ExecutionTrace;
	ENDIF
	IF upper(vPurpose) <> 'LOAD'  and upper(vTSEEQ_Mode) = 'GENERATE AND EXECUTE'  THEN
		// create QVD with EXTRACT & TRANSFORM performance statistics:
			LET vEEEQVDTraceFile = 'Historical ' & Capitalize(vPurpose);
			IF len(NoOfRows('Execution Stats') ) > 0 THEN
				QVDsGeneratedHistorical:
				NOCONCATENATE LOAD * Resident [Execution Stats] WHERE len(trim([QVD])) > 0;
				IF len(trim(QvdCreateTime('$(vETLStatisticsQVDPath)$(vEEEQVDTraceFile).qvd')) ) > 0 THEN		// QVD exists; load records from prior extract/tranform
					CONCATENATE (QVDsGeneratedHistorical) 
					First 400000	// keep no more than 400,000 records from prior executions. This is an arbitrary limit and could be raised.
					// 2022-07-07 JRR commented the following line:
					//	LOAD * FROM [$(vETLStatisticsQVDPath)\$(vEEEQVDTraceFile).qvd] (qvd);
					// 2022-07-07 JRR added the following line (extra '\' removed), for CloudBucket support, in the following line:
					LOAD * FROM [$(vETLStatisticsQVDPath)$(vEEEQVDTraceFile).qvd] (qvd);
				ENDIF
				STORE [QVDsGeneratedHistorical] INTO [$(vETLStatisticsQVDPath)$(vEEEQVDTraceFile).qvd] (qvd);
				DROP Table QVDsGeneratedHistorical;
			ENDIF
	ENDIF

	// Destroy all EEE variables, which are not needed after the engine executes, by setting each to null().  
	SEEQ_var_list_destroy:		// add required fields
	LOAD 
		*,
		'' AS [Variable Definition],
		'SET' AS [SET or LET],
		1 AS [Load Order],
		null() AS VariableSourceFile,
		null() AS VariableSourceFilePath,
		'zzz' AS Comment,
		null() AS [Exclude From Application]
	Resident SEEQ_var_list_destroy_tmp;
	DROP Table SEEQ_var_list_destroy_tmp;

	call Load_Variables_from_Resident('SEEQ_var_list_destroy', 'DROP')	// set each variable to null and drop variable metadata.


	DROP Table SEEQ_var_list_destroy;
	// BEGIN BLOCK JRR added on 2017-04-11 to support multiple SEEQ invocations from a single QVF
	// 2017-06-05 JRR removed square brackets around table name in call to NoOfRows.
	if len ( NoOfRows('Execution Stats For Entire Reload') ) > 0 THEN 
		Concatenate ([Execution Stats For Entire Reload]) LOAD * Resident [Execution Stats];
	ELSE
		[Execution Stats For Entire Reload]:
		NoConcatenate LOAD * Resident [Execution Stats];
	ENDIF
	DROP Table [Execution Stats];
	// 2017-06-05 JRR removed square brackets around table name in call to NoOfRows.
 	 if len ( NoOfRows('Rules For Entire Reload') ) > 0 THEN 
		Concatenate ([Rules For Entire Reload]) LOAD * Resident [Rules];
	ELSE
		[Rules For Entire Reload]:
		NoConcatenate LOAD * Resident [Rules];
	ENDIF
	DROP Table [Rules];
	// END BLOCK JRR added on 2017-04-11 to support multiple SEEQ invocations from a single QVF

	IF (upper(vPurpose) = 'EXTRACT' or  upper(vPurpose)= 'TRANSFORM' ) AND vTSEEQ_RetainFieldRulesFlag <> 1  THEN 
		DROP Table 	ExcludeFieldsForAllTables, 	IncludeFieldsForAllTables;
	ENDIF
	IF upper(vPurpose) = 'TRANSFORM'  AND vTSEEQ_RetainFieldRulesFlag <> 1 THEN 
		DROP Table 	TransformFieldsForAllTables;
	ENDIF

	Trace 'Exiting subroutine SEEQ_Terminate in $(vCommonScriptPath)\EEE\TSEEQ_terminate.txt';

ENDSUB	
/******************************************************************************************************************************************/