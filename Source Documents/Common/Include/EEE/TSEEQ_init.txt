sub InitVariablesOuter
	Trace 'Entering subroutine InitVariablesOuter in $(vCommonScriptPath)\EEE\TSEEQ_init.txt';
/**********************************************************************************************************************************************************
	File:		TSEEQ_init.txt
	Purpose:	Extract, Transform and Load tables as specified in the table specified by the variable vRulesSourceFile.
						Subroutines in this file are called from SEEQ_include.txt
	
	Author:		Jeff R. Robbins
	Email:		jrs@qlik.com; jr@QlikPerf.com
	
	Version:	6.0.1
	Date:		2022-07-07
	
	This program is provided in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
**********************************************************************************************************************************************************/
	SET vSEEQ_DropExcludedFieldsStatement=;
	LET vSEEQ_Semicolon=chr(59);
	LET vSEEQ_linefeed=chr(10);
	// EXTRACTed or TRANSFORMed; this is for performance profiling:
	LET vPurposeED = '$(vPurpose)' & 'ed';  

	LET vSEEQ_GetThisRuleLine ='wildmatch('&chr(39)&'$'&'(vSEEQ_TargetWithoutBrackets)'&chr(39)&', purgechar([Target], ' & chr(39) & ' -            ' & chr(39) & '))';

	LET vSEEQ_BatchStartTime = num(now());
////	XLS file format
	SET vSEEQ_XLS = 'XLS';
	SET vSEEQ_XLSFormat = 'biff';
	LET vSEEQ_XLSDollar = chr(36);
	
	LET vTSEEQ_RuleFileType = upper(right (vRulesSourceFile, 3));	// 2019-10-31 JRR added this line for CSV support
			
	IF upper('$(vPurpose)') = 'LOAD' THEN
		SET vSEEQ_RulesFieldList = 'N/A' AS [Stale After (Days)], 'N/A' AS [Target Folder], Target,	[Source Folder], Source, [Load Command], [Row Limit], Constraints, AutoNumber(Source & '_' & [Source Folder] ) AS SEEQ_TargetKey;
	ELSE 
		SET vSEEQ_RulesFieldList = *, AutoNumber(Target & '_' & [Target Folder] ) AS SEEQ_TargetKey;
	ENDIf


	SET vSEEQ_MaxRulesTryCount=4;
   	SET vSEEQ_RulesTryCount=1;	
	SET ErrorMode = 0; 		SET vSEEQ_RulesReadSuccessFlag = 0;
	do 		// keep attempting to read the rules file until you succeed (the file may be briefly locked while it is being saved, so multiple attempts might be needed).
//			Trace 'vRulesSourceFile = $(vRulesSourceFile)';
		IF vTSEEQ_RuleFileType = 'XLS' THEN
			Rules:
			NOCONCATENATE 	
			LOAD 
				'$(vRulesSourceFile)' AS [Rules File], 
				$(vSEEQ_RulesFieldList) 
			FROM [$(vRulesSourceFile)] ($(vSEEQ_XLSFormat), embedded labels, table is TABLES$(vSEEQ_XLSDollar))  WHERE UPPER(ENABLED) = 'Y' ;
		ELSEIF vTSEEQ_RuleFileType = 'CSV' THEN
			Rules:
			NOCONCATENATE 	
			LOAD 
				'$(vRulesSourceFile)' AS [Rules File], 
				$(vSEEQ_RulesFieldList) 
			FROM [$(vRulesSourceFile)] (txt, utf8, embedded labels, delimiter is ',', msq) WHERE UPPER(ENABLED) = 'Y';
		ELSE	
				TRACE 'Unknown rules file type with extension of $(vTSEEQ_RuleFileType). Exiting.';			
		ENDIF

     	LET vSEEQ_TableCount = NoOfRows('Rules') - 1;

		LET vSEEQ_RulesReadSuccessFlag = not IsNull(vSEEQ_TableCount );
		IF NOT vSEEQ_RulesReadSuccessFlag THEN 
			IF vSEEQ_RulesTryCount >= vSEEQ_MaxRulesTryCount THEN
				Trace "The rules file was not successfully read after $(vSEEQ_MaxRulesTryCount) attempts.  " & 
					"Exiting script. Please review reload log for errors.";
				SET vSEEQ_MaxRulesTryCount='';
   				SET vSEEQ_RulesTryCount='';	 
	   			SET ErrorMode = 1;
	   				$(vRulesSourceFile) Error in reading rules file.  Please check log for details;	// invalid syntax synthetically forces an error
				exit   Script;		// do not delete this line; it is not for debugging.
			ELSE
				Trace "The SEEQ rules file seems to be missing or locked. Waiting a few seconds for the lock to clear."; 
				SLEEP 3000;
			ENDIF
			LET vSEEQ_RulesTryCount = vSEEQ_RulesTryCount + 1;	
		ELSE 	
			QUALIFY *;
			UNQUALIFY Target, ENABLED;
			
			IF vTSEEQ_RuleFileType = 'XLS' THEN
				IF 	upper(vPurpose) ='EXTRACT' OR  upper(vPurpose) ='TRANSFORM' THEN
					EX:
					NOCONCATENATE LOAD 	DISTINCT * 
					FROM	[$(vRulesSourceFile)]	($(vSEEQ_XLSFormat), embedded labels, table is EXCLUDE_FIELDS$(vTSEEQ_XLS_Worksheet_PostFix)$(vSEEQ_XLSDollar))
					WHERE upper(ENABLED)='Y'
					;
					IN:
					NOCONCATENATE LOAD 	DISTINCT * 		
					FROM	[$(vRulesSourceFile)] 	($(vSEEQ_XLSFormat), embedded labels, table is INCLUDE_FIELDS$(vTSEEQ_XLS_Worksheet_PostFix)$(vSEEQ_XLSDollar))
					WHERE upper(ENABLED)='Y'
					;
				ENDIF
				IF 	upper(vPurpose) = 'TRANSFORM' THEN			
					TR:
					NOCONCATENATE 
					LOAD 	DISTINCT * 		
					FROM	[$(vRulesSourceFile)] 	($(vSEEQ_XLSFormat), embedded labels, table is TRANSFORM_FIELDS$(vTSEEQ_XLS_Worksheet_PostFix)$(vSEEQ_XLSDollar))
					WHERE upper(ENABLED)='Y'
					;
				ENDIF
			ELSEIF vTSEEQ_RuleFileType = 'CSV' THEN				
				LET vRulesSourceFile_EXCLUDE_FIELDS=Replace(vRulesSourceFile, '_TABLES_', '_EXCLUDE_FIELDS_');
				LET vRulesSourceFile_INCLUDE_FIELDS=Replace(vRulesSourceFile, '_TABLES_', '_INCLUDE_FIELDS_');	
				LET vRulesSourceFile_TRANSFORM_FIELDS=Replace(vRulesSourceFile, '_TABLES_', '_TRANSFORM_FIELDS_');											
				IF 	upper(vPurpose) ='EXTRACT' OR  upper(vPurpose) ='TRANSFORM' THEN
					EX:
					NOCONCATENATE LOAD 	DISTINCT * 
					FROM [$(vRulesSourceFile_EXCLUDE_FIELDS)] (txt, utf8, embedded labels, delimiter is ',', msq)
					WHERE upper(ENABLED)='Y'
					;
					IN:
					NOCONCATENATE LOAD 	DISTINCT * 		
					FROM [$(vRulesSourceFile_INCLUDE_FIELDS)] (txt, utf8, embedded labels, delimiter is ',', msq)
					WHERE upper(ENABLED)='Y'
					;
				ENDIF
				IF 	upper(vPurpose) = 'TRANSFORM' THEN			
					TR:
					NOCONCATENATE 
					LOAD 	DISTINCT * 		
					FROM [$(vRulesSourceFile_TRANSFORM_FIELDS)] (txt, utf8, embedded labels, delimiter is ',', msq)
					WHERE upper(ENABLED)='Y'
					;
				ENDIF
				SET vRulesSourceFile_EXCLUDE_FIELDS=;
				SET vRulesSourceFile_INCLUDE_FIELDS=;	
				SET vRulesSourceFile_TRANSFORM_FIELDS=;	
			ENDIF
			
			UNQUALIFY *;
			IF upper(vPurpose) = 'EXTRACT' OR Upper(vPurpose) = 'TRANSFORM' THEN
				DROP FIELD ENABLED;
			ENDIF
			RENAME Table EX to ExcludeFieldsForAllTables;
			RENAME Table IN to IncludeFieldsForAllTables;
			RENAME Table TR to TransformFieldsForAllTables;		
		ENDIF
	loop while vSEEQ_RulesReadSuccessFlag = 0
	SET vSEEQ_MaxRulesTryCount='';
	SET vSEEQ_RulesTryCount='';
	Trace "The SEEQ rules file has been successfully read."; 	
	SET ErrorMode = 1;
	SET vSEEQ_RulesFieldList = '';	
	SET vSEEQ_RulesReadSuccessFlag = '';
	SET vTSEEQ_RuleFileType=;

	Trace 'Exiting subroutine InitVariablesOuter in $(vCommonScriptPath)\EEE\TSEEQ_init.txt';
end sub // InitVariablesOuter
/******************************************************************************************************************************************/
sub InitVariablesInner
	Trace 'Entering subroutine InitVariablesInner in $(vCommonScriptPath)\EEE\TSEEQ_init.txt';

	SET vSEEQ_NumRecordsEXTRACTed=0;
	SET vSEEQ_DropExcludedFieldsStatement=;		// 2018-07-12 JRR added this line
	SET vSEEQ_NumFields$(vPurposeED)=0;		// 2017-04-08 JRR moved this line from InitVariablesOuter to InitVariablesInner
	SET vSEEQ_NumRecords$(vPurposeED)=0;	// 2017-04-08 JRR moved this line from InitVariablesOuter to InitVariablesInner
	SET vSEEQ_Messages=;
	SET vSEEQ_ThisIsMappingTable=0;		
	SET vSEEQ_ExecuteStatement='';
	SET vSEEQ_GetSQL_RecordCount='';
	SET vSEEQ_ExecuteStatementIncrementalBlock2='';
	SET vSEEQ_ExecuteStatementIncrementalBlock3='';
	SET vSEEQ_QlikRecordCount=;
	SET vSEEQ_FieldsExpansion ='';
	 LET vSEEQ_TimeIteration = num(now(1));		// performance profiling
	// For Extract or Tranforms, the target is a QVD; for a Load, the target is a table in the QV associative data model. 
	SET vSEEQ_StoreReduced = ''; 	
	SET vSEEQ_Target = ''; 
	SET vSEEQ_TargetWithoutBrackets = ''; 
	SET vSEEQ_TargetFolder = ''; 	
	SET vSEEQ_Source= ''; 	// database table or stored procedure (for an Extract) or QVD (for a Transform or LOAD)
	SET vSEEQ_SourceFolder = ''; 
	SET vSEEQ_StaleAfter = ''; 	// Number of days which a QVD is considered "fresh".
	SET vSEEQ_Constraints = ''; 	// Typically a WHERE clause to reduce the record set

	SET vSEEQ_Fields = ''; 		// ALL, INCLUDE_SUBSET or EXCLUDE_SUBSET	
	SET vSEEQ_LoadCommand = '';	// SELECT or EXEC for an Extract, LOAD for a QVD
	SET vSEEQ_QVDCreateTime = '';// Date stamp on the Target QVD.
	SET vSEEQ_AddFields = ' ';	// Fields to add during a Transform		
	SET vSEEQ_TableType = ' ';	// Dimension or Fact
	SET vSEEQ_IncrementalLoadType = 'INIT';
	SET vSEEQ_RowLimit = ''; 	
	LET vSEEQ_ModfiedTimestampField = 'INIT';
	
	SET vSEEQ_SourceFolderPostfix='';
	
	LET vSEEQ_Incremental_ID_Fields = 'INIT';
	SET vSEEQ_SourceType ='';
	SET vSEEQ_SourceFormat ='';
	SET vSEEQ_KeepOrDrop='';
	LET  vSEEQ_PostLoadScript  = peek('Post Load Script' , $(vSEEQ_OuterLoopCounter), 'Rules' );
// 	LET  = replace( peek('Post Load Script' , $(vSEEQ_OuterLoopCounter), 'Rules' ), ';', '$' & '(vSEEQ_Semicolon)');
//	IF len(trim(vSEEQ_PostSQLScript)) < 1 THEN
//		SET vSEEQ_PostSQLScript='zz';
//	ENDIF	
	LET vSEEQ_StoreReduced =  upper(peek('STORE REDUCED', $(vSEEQ_OuterLoopCounter), 'Rules')) ;
	LET vSEEQ_Target =  '[' & PurgeChar(peek('Target', $(vSEEQ_OuterLoopCounter), 'Rules'), ' -	[]')  & ']' ;		// 2016-09-25 JRR added this line.
	LET vSEEQ_TargetWithoutBrackets =  PurgeChar(peek('Target', $(vSEEQ_OuterLoopCounter), 'Rules'), ' -	[]')   ;		// 2016-09-25 JRR added this line.	
	
	LET vSEEQ_TargetUnexpanded =  replace(peek('Target', $(vSEEQ_OuterLoopCounter), 'Rules'), '$', '#');		// 2020-09-24 JRR added this line to preserve un-evaluated target name


	LET vSEEQ_TargetFolder =  peek('Target Folder', $(vSEEQ_OuterLoopCounter), 'Rules');	 // 2020-09-29 JRR uncommented		
	//2017-07-22 JRR commented the following line due to error when running in Qlik Sense June 2017 release:
//	IF right(vSEEQ_TargetFolder, 1) <> $(vSlash) THEN			// append trailing '\' (QlikView) or '/' (QlikSense) to complete the path.
	//2017-07-22 JRR added the following line to resolve error when running in Qlik Sense June 2017 release:
	IF right(vSEEQ_TargetFolder, 1) <> '$(vSlash)' THEN			// append trailing '\' (QlikView) or '/' (QlikSense) to complete the path.
		SET vSEEQ_TargetFolder  = '$(vSEEQ_TargetFolder)$(vSlash)';
	ENDIF

	// 2022-07-07 JRR added the following line for SaaS / CloudBucket support:
	LET vSEEQ_TargetFolder = $(vUDF_RemoveExtraDoubleSlashesFromPath(vSEEQ_TargetFolder));

	LET vSEEQ_TargetKey  = peek('SEEQ_TargetKey', $(vSEEQ_OuterLoopCounter), 'Rules');	
	
	//Trace 	$(SEEQ_TargetKey); 
//	LET vSEEQ_Source =  replace ( PurgeChar(peek('Source', $(vSEEQ_OuterLoopCounter), 'Rules'), ' -	'), '<space>', ' ') ;	// 2016-10-24 JRR commented this line.
	LET vSEEQ_Source =  peek('Source', $(vSEEQ_OuterLoopCounter), 'Rules') ;	
	LET vSEEQ_SourceFolder =  peek('Source Folder', $(vSEEQ_OuterLoopCounter), 'Rules');
	IF right(vSEEQ_SourceFolder, 1) = '\' OR   right(vSEEQ_SourceFolder, 1) = '/' THEN		// strip trailing slash if it exist; we add it back later..
		LET vSEEQ_SourceFolder  = left(vSEEQ_SourceFolder, len(vSEEQ_SourceFolder) - 1);
	ENDIF

	IF right(vSEEQ_SourceFolder, 1) <> '$(vSlash)' THEN			// append trailing '\' to complete the path.
		SET vSEEQ_SourceFolder  = '$(vSEEQ_SourceFolder)$(vSlash)';
	ENDIF

	SET vSEEQ_SourceOriginal = $(vSEEQ_Source) ; 	//	for the COMMENT TABLE done at the end of a Tranform
	LET vSEEQ_StaleAfter =  Replace(peek('Stale After (Days)', $(vSEEQ_OuterLoopCounter), 'Rules')  , ' ', '');
	LET vSEEQ_LoadCommand = peek('Load Command', $(vSEEQ_OuterLoopCounter), 'Rules');		
	LET vSEEQ_Fields =  Replace( peek('Fields', $(vSEEQ_OuterLoopCounter), 'Rules')  , ' ', '');			
	LET vSEEQ_Constraints =   if (
									left (peek('Constraints', $(vSEEQ_OuterLoopCounter), 'Rules'), 2) = '//', 
									'',		// if the the '//' indicates the contraint is commented, simply ignore the constraint.
									trim(peek('Constraints', $(vSEEQ_OuterLoopCounter), 'Rules')) 
								); 
	//	LET vSEEQ_ThisIsMappingTable= wildmatch(vSEEQ_LoadCommand, '*mapping*'); // 2017-02-21 JRR commented this line so that a commented MAPPING prefix would not be executed.
	LET vSEEQ_ThisIsMappingTable= if (upper(left(trim(vSEEQ_LoadCommand), 7)) = 'MAPPING', 1, 0);	// 2017-02-21 JRR added this line, which disregards MAPPING if it's preceeded by '//'.
	LET  vSEEQ_LastModfiedTimestampFormatForQuery = peek('Last Modfied Timestamp Format for Query', $(vSEEQ_OuterLoopCounter), 'Rules');

	 IF	upper(left(vSEEQ_Constraints, 5)) = 'WHERE' THEN	// 2019-10-17 JRR added call to upper()
		LET vSEEQ_Constraints = Right( LTrim(vSEEQ_Constraints),  Len(Ltrim(vSEEQ_Constraints)) - 5  );// strip intial "WHERE" if it exists; we add it back later.
	ENDIF

	LET vSEEQ_QVDCreateTime = if(len(trim(QvdCreateTime('$(vSEEQ_TargetFolder)$(vSEEQ_TargetWithoutBrackets).qvd'))) < 1, 0, QvdCreateTime('$(vSEEQ_TargetFolder)$(vSEEQ_TargetWithoutBrackets).qvd'));
	IF upper(vPurpose) = 'TRANSFORM' THEN 
		LET vSEEQ_SourceType =   peek('Source Type', $(vSEEQ_OuterLoopCounter), 'Rules');	
	endif
						
	LET vSEEQ_RowLimit =   trim(peek('Row Limit', $(vSEEQ_OuterLoopCounter), 'Rules'));	

	LET vSEEQ_IncrementalLoadType =   if (upper(vPurpose)='EXTRACT', peek('Incremental Load Type', $(vSEEQ_OuterLoopCounter), 'Rules'), 'N/A');
	LET vSEEQ_ModfiedTimestampField = peek('Last Modfied Timestamp Field', $(vSEEQ_OuterLoopCounter), 'Rules');
	LET vSEEQ_Incremental_ID_Fields = 
//							chr(39) &
							replace ( 
									replace ( peek('Incremental ID Field(s)', $(vSEEQ_OuterLoopCounter), 'Rules') , ' ', '')
								, ',' ,  '&' & chr(39)&'_'&chr(39) & '&') // & chr(39)  & '-' & chr(39) & '&'  & chr(39) )
//							& chr(39) 
	;
	SET vSEEQ_From = 'FROM ';  				// for SQL SELECT statements and LOAD from QVD.  'FROM ' will be blanked out in the case of stored procedure calls
	IF IsNull (vSEEQ_QVDCreateTime) THEN 	// Target QVD does not exist. (Relevant to Extract and Transform).
		LET vSEEQ_QVDCreateTime = 0;
	ENDIF
	
	IF len(vSEEQ_StaleAfter) < 1 THEN 
		SET vSEEQ_StaleAfter = 0;
	ENDIF

	IF len (vSEEQ_RowLimit) > 0 THEN 					// limit SELECT or LOAD to first n rows if the user specified a limit.
		SET vSEEQ_Prefix = 'First $(vSEEQ_RowLimit) ';
	ELSE 
		SET vSEEQ_Prefix = '';
	ENDIF

	IF upper(vPurpose) = 'EXTRACT' OR upper(vPurpose) = 'TRANSFORM' THEN 
		LET vSEEQ_KeepOrDrop = upper(peek('Keep or Drop', $(vSEEQ_OuterLoopCounter), 'Rules' ));
	ENDIF
	LET vSEEQ_LastExecTime = 0;	

	IF upper(vPurpose) = 'EXTRACT' THEN 
		set vSEEQ_SQL = 'SQL ';			// 2020-10-14 JRR commented this line, since it breaks a preceding load in EXTRACT
		set vSEEQ_SQL = ' ';			// 2020-10-14 JRR added this line
	ELSEIF upper(vPurpose) = 'TRANSFORM' OR upper(vPurpose) = 'LOAD' THEN 
			IF upper(vSEEQ_SourceType = 'EXTERNAL' ) THEN
				LET vSEEQ_SourceFormat = peek('External Source Format', $(vSEEQ_OuterLoopCounter), 'Rules' );
				set vSEEQ_Source = '[$(vSEEQ_SourceFolder)$(vSEEQ_Source)] $(vSEEQ_SourceFormat)'; 
			ELSE
				set vSEEQ_Source = '[$(vSEEQ_SourceFolder)$(vSEEQ_Source).qvd] (qvd)'; 
			ENDIF
			set vSEEQ_SQL ='';		// for a Transforms and Loads, we load from a QVD, so we blank out the vSEEQ_SQL variable
	ENDIF
	SET vSEEQ_ErrorDetected = 0;

	Trace 'Exiting subroutine InitVariablesInner in $(vCommonScriptPath)\EEE\TSEEQ_init.txt';

end Sub	// InitVariablesInner
/******************************************************************************************************************************************/