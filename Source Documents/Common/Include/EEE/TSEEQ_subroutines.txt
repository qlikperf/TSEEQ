Sub ExcludeFieldsInit
	Trace 'Entering subroutine ExcludeFieldsInit in $(vCommonScriptPath)\EEE\TSEEQ_subroutines.txt';
/**********************************************************************************************************************************************************
	File:				SEEQ_subroutines.txt
	Purpose:			Extract, Transform and Load tables as specified in the table specified by the variable vRulesSourceFile.
						Subroutines in this file are called from SEEQ_include.txt
	
	Author:				Jeff R. Robbins
	Author email:		jrs@qlik.com; jr@qlikperf.com
	
	Version:	6.0.1
	Date:		2022-07-07
	
	This program is provided in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
**********************************************************************************************************************************************************/
	SET vExcludeFields='';
	IF vSEEQ_Fields = 'EXCLUDE_SUBSET' THEN 
			ExcludeFields:
			NoConcatenate 
			LOAD 
				DISTINCT EX.Field AS ExcludeFields
			Resident ExcludeFieldsForAllTables WHERE $(vSEEQ_GetThisRuleLine);
			ExcludeFieldsConcat:
			LOAD 
				Concat (DISTINCT ExcludeFields, ', ') AS ExcludeFieldsConcat	
			Resident ExcludeFields;
	ENDIF

	Trace 'Exiting subroutine ExcludeFieldsInit in $(vCommonScriptPath)\EEE\TSEEQ_subroutines.txt';
END SUB			// ExcludeFieldsInit
/******************************************************************************************************************************************/
sub ExcludeFields
	Trace 'Entering subroutine ExcludeFields in $(vCommonScriptPath)\EEE\TSEEQ_subroutines.txt';
	IF upper(vPurpose) = 'EXTRACT' THEN	
		LET vExcludeFields = peek('ExcludeFieldsConcat', 0, 'ExcludeFieldsConcat');
		IF upper(vPurpose) = 'EXTRACT' AND vSEEQ_Fields = 'EXCLUDE_SUBSET' AND len('$(vExcludeFields)' ) > 0  THEN		
		// exclude fields are specified in vRulesSourceFile
		SET vSEEQ_DropExcludedFieldsStatement='DROP Fields $(vExcludeFields) FROM $(vSEEQ_Target)$(vSEEQ_Semicolon)';
		ENDIF
	ENDIF
	Trace 'Exiting subroutine ExcludeFields in $(vCommonScriptPath)\EEE\TSEEQ_subroutines.txt';
end sub	// ExcludeFields
/******************************************************************************************************************************************/
sub IncludeFields
	Trace 'Entering subroutine IncludeFields in $(vCommonScriptPath)\EEE\TSEEQ_subroutines.txt';
	SET vExcludeFields='';
	IF upper(vPurpose) = 'EXTRACT' AND upper(vSEEQ_Fields) = 'INCLUDE_SUBSET' THEN	
	// INCLUDE_FIELD processing for TRANSFORM is handled by the TranformFields procedure, farther below
			IncludeField:
			LOAD 	DISTINCT IN.Field AS IncludeField, RowNo() AS Order
//			LOAD 	DISTINCT IN.Field AS IncludeField, RecNo() AS Order		// LOOKY
			Resident IncludeFieldsForAllTables 
			// WHERE $(vSEEQ_GetThisRuleLine)	and purgechar([Target], ' -	') = '$(vSEEQ_TargetWithoutBrackets)'; // 2020-02-20 JRR COMMENTED THIS LINE
			WHERE $(vSEEQ_GetThisRuleLine)	; // 2020-02-20 JRR ADDED THIS LINE to enable INCLUDE_FIELD wildcard matching on Targets 

			IncludeFields:
			LOAD   Concat (DISTINCT IncludeField, ', ' & chr(10), Order ) & chr(10)  AS IncludeFields RESIDENT IncludeField;
			drop Table IncludeField;		
			LET vSEEQ_FieldsExpansion = peek('IncludeFields', 0, 'IncludeFields');
			drop Table IncludeFields;					

			IF len ( trim (vSEEQ_FieldsExpansion) ) < 1 THEN	
				CALL SEEQ_WriteMessage('Fields = INCLUDE_SUBSET. However, no ENABLED rows for $(vSEEQ_TargetWithoutBrackets) were found in the INCLUDE_FIELDS sheet of $(vRulesSourceFile).');
				CALL SEEQ_WriteMessage('Switching to all fields (*)');
				SET vSEEQ_FieldsExpansion = '*';
			ENDIF
		ENDIF
		Trace 'Exiting subroutine IncludeFields in $(vCommonScriptPath)\EEE\TSEEQ_subroutines.txt';
end sub	// IncludeFields			
///******************************************************************************************************************************************/
sub TransformFields 
	Trace 'Entering subroutine TransformFields in $(vCommonScriptPath)\EEE\TSEEQ_subroutines.txt';
	IF upper(vPurpose) = 'TRANSFORM' THEN
		SET vSEEQ_FieldsExpansion = '';	// for TRANSFORM, we discard vSEEQ_FieldsExpansion as used by EXTRACT.
	
		TargetFields:
		LOAD 	DISTINCT 
				$(vSEEQ_TargetKey) AS SEEQ_TargetKey,
				[TR.Target Field Definition] AS [Target Field Definition],
				PurgeChar([TR.Target Field Name],'[]')  AS [Target Field Name], 
				if (IsNull([TR.Field Order]), 99, [TR.Field Order] )	AS [EEE Field Order],	// sort last (99) if field order is not specified
				'TRANSFORM_FIELDS' AS [Source XLS Sheet]
		Resident TransformFieldsForAllTables
//		FROM	[$(vRulesSourceFile)] 	($(vSEEQ_XLSFormat), embedded labels, table is TRANSFORM_FIELDS$(vSEEQ_XLSDollar))
		WHERE $(vSEEQ_GetThisRuleLine);

		// If the transform source is an External file (CSV, XLS, etc), we need to create a proxy QVD of the source, so 
		// that we can read field information from the header of that proxy QVD.  This use of the proxy QVD eliminates 
		// the need to have transform logic for both QVD and External file types; we can use a single set of logic:
		IF vSEEQ_SourceType = 'EXTERNAL' THEN
			CAll SEEQ_WriteProxyQVD;		
		ENDIF

		IF vSEEQ_SourceType = 'EXTERNAL' THEN
			LET  vSEEQ_XML_QVD_Target = replace (vSEEQ_TmpProxyTable, '(qvd)', '(XmlSimple, Table is [QvdTableHeader/Fields/QvdFieldHeader])');
			SET vSEEQ_TmpProxyTable='';
		ELSE 	// QVD
			LET  vSEEQ_XML_QVD_Target = replace (vSEEQ_Source, '(qvd)', '(XmlSimple, Table is [QvdTableHeader/Fields/QvdFieldHeader])');
		ENDIF

		// 2022-07-07 JRR added the following line for SaaS / CloudBucket support:
		LET vSEEQ_XML_QVD_Target = $(vUDF_RemoveExtraDoubleSlashesFromPath(vSEEQ_XML_QVD_Target));

		CALL SEEQ_TransformIncludeSubset;
		
		Concatenate (TargetFields) LOAD 	DISTINCT 
			$(vSEEQ_TargetKey) AS SEEQ_TargetKey,
			'[' & replace([Target Field Name Tmp], '_original', '') & ']' AS 	[Target Field Definition],
			[Target Field Name Tmp]  AS [Target Field Name], 	
			RowNo()+1000 AS [EEE Field Order],	// RowNo will preserve line ordering from the XLS worksheekt, ordering needed for MAPPING tables.  We add 1000 to sort after rules from TRANFORM_FIELDS worksheet
			[Source XLS Sheet]
		Resident TargetFieldsTmp;

		DROP Table 		TargetFieldsTmp;

		TargetFields2:
		LOAD  
			*,
			[Target Field Definition] & ' AS ' & '[' &  [Target Field Name] & ']' AS [Target Field Script Line]
		Resident TargetFields
		Order BY [EEE Field Order]; 

		DROP Table TargetFields; RENAME Table TargetFields2 TO TargetFields;

		AddFields:
			NoConcatenate
			LOAD
 				 chr(10) & Concat ('     ' & [Target Field Script Line], ', ' & chr(10),  [EEE Field Order]) & chr(10) AS AddFields
 			Resident TargetFields;

			LET vSEEQ_FieldsExpansion = ' ' & peek('AddFields', 0, 'AddFields');//  & ', ';
		
			IF len ( trim (vSEEQ_FieldsExpansion) ) < 1 THEN	// No fields are specified for the current target.
				SET vSEEQ_FieldsExpansion = '*';
				IF upper(vSEEQ_Fields) = 'INCLUDE_SUBSET'	THEN
					CALL SEEQ_WriteMessage('Fields = INCLUDE_SUBSET. However, no ENABLED rows for $(vSEEQ_TargetWithoutBrackets) were found in the INCLUDE_FIELDS or TRANSFORM_FIELDS sheets of $(vRulesSourceFile).');	
					CALL SEEQ_WriteMessage('Switching to all fields (*)');
				ENDIF
			ENDIF
	DROP Table AddFields;		
	DROP Table TargetFields;
	ENDIF	
	Trace 'Exiting subroutine TransformFields in $(vCommonScriptPath)\EEE\TSEEQ_subroutines.txt';
END SUB	//  TransformFields
/******************************************************************************************************************************************/
sub SEEQ_WriteMessage(vSEEQ_MessageToWrite)
				TRACE '$(vSEEQ_TargetWithoutBrackets):  $(vSEEQ_MessageToWrite)';
				SET vSEEQ_Messages=$(vSEEQ_Messages)$(vSEEQ_linefeed) $(vSEEQ_MessageToWrite);
endsub
/******************************************************************************************************************************************/
sub SEEQ_WriteProxyQVD
	Trace 'Entering subroutine SEEQ_WriteProxyQVD in $(vCommonScriptPath)\EEE\TSEEQ_subroutines.txt';
		// If the transform source is an External file (CSV, XLS, etc), we need to create a proxy QVD of the source, so 
		// that we can read field information from the header of that proxy QVD.  This use of the proxy QVD eliminates 
		// the need to have transform logic for both QVD and External file types; we can use a single set of logic for both.
			
			// 2022-07-07 JRR added the following line for SaaS / CloudBucket support:
			LET vSEEQ_Source = $(vUDF_RemoveExtraDoubleSlashesFromPath(vSEEQ_Source));

// 			Trace 'vSEEQ_Source = $(vSEEQ_Source)';
// 			Trace 'vSEEQ_TargetFolder = $(vSEEQ_TargetFolder)';
// exit script;
			TmpProxyTable:
			First 100 LOAD * FROM $(vSEEQ_Source);
			STORE TmpProxyTable INTO  [$(vSEEQ_TargetFolder)tmp_TSEEQ_proxy.qvd] (qvd);
			DROP Table TmpProxyTable;
			SET vSEEQ_TmpProxyTable = [$(vSEEQ_TargetFolder)tmp_TSEEQ_proxy.qvd] (qvd);
	Trace 'Exiting subroutine SEEQ_WriteProxyQVD in $(vCommonScriptPath)\EEE\TSEEQ_subroutines.txt';
ENDSUB
/******************************************************************************************************************************************/
sub SEEQ_TransformIncludeSubset
	Trace 'Entering subroutine SEEQ_TransformIncludeSubset in $(vCommonScriptPath)\EEE\TSEEQ_subroutines.txt';
		IF upper(vSEEQ_Fields) = 'INCLUDE_SUBSET'	THEN
			TargetFieldsTmp:
			LOAD IN.Field 	   AS [Target Field Name Tmp], 'INCLUDE_FIELDS' AS [Source XLS Sheet]
			Resident IncludeFieldsForAllTables
			WHERE $(vSEEQ_GetThisRuleLine) and 	NOT exists ([Target Field Name], IN.Field);
// Comment the following 3 lines to exclude unmodified original fields (tagged with '_original' in the case where there is name duplication: 
//			LOAD Field 	&'_original'   AS [Target Field Name Tmp], 'INCLUDE_FIELDS' AS [Source XLS Sheet]	
//			Resident IncludeFieldsForAllTables
//			WHERE $(vSEEQ_GetThisRuleLine) and 	exists ([Target Field Name], IN.Field);
		ELSEIF upper(vSEEQ_Fields) = 'ALL' 	 	THEN
			TargetFieldsTmp:
			LOAD FieldName 			   AS [Target Field Name Tmp], 'TABLES (ALL)' AS [Source XLS Sheet]	FROM $(vSEEQ_XML_QVD_Target)		
			WHERE NOT exists ([Target Field Name], FieldName);
			// comment the following line to exclude unmodified original fields (tagged with '_original' in the case where there is name duplication:
			// LOAD FieldName&'_original' AS [Target Field Name Tmp], 'TABLES (ALL)' AS [Source XLS Sheet]	FROM $(vSEEQ_XML_QVD_Target)		WHERE     	exists ([Target Field Name], FieldName); 
		ELSEIF upper(vSEEQ_Fields) = 'EXCLUDE_SUBSET' THEN
			TargetFieldsTmp:
			LOAD FieldName 			   AS [Target Field Name Tmp], 'EXCLUDE_FIELDS' AS [Source XLS Sheet]	FROM $(vSEEQ_XML_QVD_Target)	
			WHERE  NOT EXISTS ([ExcludeFields], FieldName)  AND NOT exists ([Target Field Name], FieldName); 
			// comment the following line to exclude unmodified original fields (tagged with '_original' in the case where there is name duplication:
			// LOAD FieldName&'_original' AS [Target Field Name Tmp], 'TABLES (ALL)' AS [Source XLS Sheet]	FROM $(vSEEQ_XML_QVD_Target)		WHERE     	exists ([Target Field Name], FieldName); 
		ENDIF
	Trace 'Exiting subroutine SEEQ_TransformIncludeSubset in $(vCommonScriptPath)\EEE\TSEEQ_subroutines.txt';
ENDSUB		