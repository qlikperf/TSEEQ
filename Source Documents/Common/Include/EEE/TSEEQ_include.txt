sub SEEQ_ExecuteRulesSourceFile
	Trace 'Entering subroutine SEEQ_ExecuteRulesSourceFile in $(vCommonScriptPath)\EEE\TSEEQ_include.txt';
/**********************************************************************************************************************************************************
	File:		SEEQ_include.txt
	Purpose:	Extract, Transform and Load tables as specified in the table specified by the variable vRulesSourceFile.
						
	Author:		Jeff R. Robbins
	Email:		jrs@qlik.com; jr@QlikPerf.com
	
	Version:	6.0.1
	Date:		2022-07-07

	This program is provided in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
**********************************************************************************************************************************************************/
	Call InitVariablesOuter;	
	SEEQ_ExecutionTrace: LOAD 'INIT' AS [EEE Executed Script], now() AS [EEE Execution Completion Time], 0 AS [EEE Execution Time Elapsed]  AutoGenerate 1;
	for vSEEQ_OuterLoopCounter = 0 to vSEEQ_TableCount  // created in InitVariablesOuter
		Call InitVariablesInner;

		SET vTSEEQ_ModeOriginal=$(vTSEEQ_Mode);
		if upper(vPurpose) <> 'LOAD' and vReloadTimeStart -  vSEEQ_QVDCreateTime <= vSEEQ_StaleAfter and upper(vTSEEQ_Mode)='GENERATE AND EXECUTE'  then 
			IF vSEEQ_QVDCreateTime <> 0 THEN // QVD exists but is stale
				SET vTSEEQ_ModeOriginal=$(vTSEEQ_Mode);
				SET vTSEEQ_Mode='GENERATE ONLY';
				Call SEEQ_WriteMessage ('$(vTarget) QVD age is less than Stale After parameter.  Changing vTSEEQ_Mode to GENERATE ONLY for this QVD.')
			ENDIF		
		ENDIF
		
		CALL ExcludeFieldsInit;				// load list of exclude fields, if EXCLUDE_SUBSET is specified.
		IF upper(vSEEQ_Fields) <> 'INCLUDE_SUBSET' THEN
			// get all fields in the target table. Note that for EXTRACTs, the * is used for the SQL query, even if EXCLUDE_SUBSET is specified;
			// exclusion of fields is done by a post-query DROP in the CALL to ExcludeFields:
			SET vSEEQ_FieldsExpansion = '*';	
		ELSE 
			call IncludeFields;		// populate vSEEQ_FieldsExpansion with list of explicitly defined INCLUDE_FIELDS 
		ENDIF											
		//Below, operation-specific procedures are (usually) always called. For example, TransformFields will be called even if vPurpose='EXTRACT'.
		// We do this to keep this keep this  file short by putting conditionals on vPurpose within each of the specific procedures, rather than in this file.
		CALL TransformFields;		// set vSEEQ_FieldsExpansion for TRANSFORM operations.  
		CALL IncrementalBlock1;		// Incremental pre-processing for EXTRACT operations. 

		// 2022-07-07 JRR added the following line for SaaS / CloudBucket support:
		LET vSEEQ_Source = $(vUDF_RemoveExtraDoubleSlashesFromPath(vSEEQ_Source));

		SET vSEEQ_ExecuteStatement = '$(vSEEQ_Target):		
$(vSEEQ_Prefix)$(vSEEQ_SQL)$(vSEEQ_LoadCommand) $(vSEEQ_FieldsExpansion) $(vSEEQ_From) $(vSEEQ_Source) $(vSEEQ_Constraints)$(vSEEQ_Semicolon)';

	// Generate statement to drop fields listed in EXCLUDE_FIELDS rules (for EXTRACT only; in TRANSFORM, excluded fields are never loaded from QVD:
		CALL ExcludeFields; 
		
		IF len(trim(vSEEQ_DropExcludedFieldsStatement)) >0  THEN
			SET vSEEQ_ExecuteStatement = '$(vSEEQ_ExecuteStatement) 
$(vSEEQ_DropExcludedFieldsStatement)';
		ENDIF

		IF len(trim(vSEEQ_PostLoadScript)) >0  THEN
			SET vSEEQ_ExecuteStatement = '$(vSEEQ_ExecuteStatement) 
$(vSEEQ_PostLoadScript)';
		ENDIF	

    	LET vSEEQ_TimeLoad = num(now(1));		// performance profiling
		//----  CORE: The following lines run the SQL (SELECT or EXEC) for an EXTRACT. For a TRANSFORM or LOAD, load from QVD is run:
		IF upper(vTSEEQ_Mode) = 'GENERATE AND EXECUTE' THEN		// vTSEEQ_Mode is not GENERATE ONLY
			Trace 'Executing the following code:';	
			Trace '$(vSEEQ_ExecuteStatement)';		
			$(vSEEQ_ExecuteStatement);
			LET vSEEQ_NumRecords$(vPurposeED) = if ( len(trim(NoOfRows('$(vSEEQ_TargetWithoutBrackets)'))) > 0, NoOfRows('$(vSEEQ_TargetWithoutBrackets)'), 0);
			LET vSEEQ_NumFields$(vPurposeED) = if ( len(trim(NoOfFields('$(vSEEQ_TargetWithoutBrackets)'))) > 0, NoOfFields('$(vSEEQ_TargetWithoutBrackets)'), 0);

			IF $(vSEEQ_NumRecords$(vPurposeED)) = 0 and vSEEQ_ThisIsMappingTable <> 1 and upper(vPurpose) <> 'LOAD'  THEN
				SET vSEEQ_ErrorDetected = 1;
//				CALL SEEQ_WriteMessage('0 records $(vPurposeED) from $(vSEEQ_TargetWithoutBrackets). QVD will not be written.'); 	// 2020-08-21 JRR commented
// 				CALL SEEQ_WriteMessage('0 records $(vPurposeED) from $(vSEEQ_Source). QVD will not be written.'); 		// 2020-08-21 JRR added
				 IF  upper(vSEEQ_IncrementalLoadType) = 'INCREMENTAL_DELETE' and upper(vPurpose) = 'EXTRACT' THEN		// 2020-10-05 JRR added this line and next
						CALL SEEQ_WriteMessage('0 new/modified records $(vPurposeED) from $(vSEEQ_Source). Deleted record analysis to follow.'); 
				ELSE
				 	CALL SEEQ_WriteMessage('0 records $(vPurposeED) from $(vSEEQ_Source). QVD will not be written.'); 	// 2020-08-21 JRR added
				ENDIF
			ENDIF
		ENDIF
		//---- 
		LET vSEEQ_ComputerName=ComputerName();
		trace 'Computer name is $(vSEEQ_ComputerName)';
		// In a fast sandbox environment, simulate latency for the purposes of generating sample data for performance profiling.
		// if upper(vSEEQ_ComputerName)='USREM-JRS' or upper(vSEEQ_ComputerName)='W2008001'THEN		// use hostname to determine if this is a sandbox
		SET vTSEEQ_SimulateLatencyFlag = 0;
		if vTSEEQ_SimulateLatencyFlag = 1 THEN								// use flag to determine if this is a sandbox
			LET vSEEQ_RandomSleepTime= 800 + (rand() * 3000);
			TRACE 'Sleeping $(vSEEQ_RandomSleepTime) milliseconds to simulate latency';
			sleep ($(vSEEQ_RandomSleepTime));
		ENDIF
//		SET vSEEQ_ComputerName=;		// 2020-08-29 JRR commented
		SET vSEEQ_RandomSleepTime=;		
		LET vSEEQ_TimeLoad = num(now(1)) -  vSEEQ_TimeLoad;  // performance profiling				

		CALL IncrementalBlock2;		// Incremental post-processing for EXTRACT operations
		SET vSEEQ_ExecuteStatement = '$(vSEEQ_ExecuteStatement) $(vSEEQ_ExecuteStatementIncrementalBlock2)$(vSEEQ_GetSQL_RecordCount)$(vSEEQ_ExecuteStatementIncrementalBlock3)';

		Concatenate (SEEQ_ExecutionTrace) LOAD $(vSEEQ_TargetKey) AS SEEQ_TargetKey, '$(vSEEQ_ExecuteStatement)' AS [EEE Executed Script], 
					Timestamp(num(now(1)), 'hh:mm:ss TT') AS [EEE Execution Completion Time], $(vSEEQ_TimeLoad) AS [EEE Execution Time Elapsed], RowNo()-1 AS  [EEE Execution Order] AutoGenerate 1;
//		CALL MetaData		// tag fields in TRANSFORM operations	
		CALL StoreQVD;		// Store the EXTRACTed or TRANSFORMed table. Logic inside the subroutine will prevent a store if vPurpose='LOAD'.
		SET vTSEEQ_Mode=$(vTSEEQ_ModeOriginal);

	next  vSEEQ_OuterLoopCounter

	Call SEEQ_Terminate;
	SET vTSEEQ_ModeOriginal='';
	Trace 'Exiting subroutine SEEQ_ExecuteRulesSourceFile in $(vCommonScriptPath)\EEE\TSEEQ_include.txt';
endsub